buildscript {
	repositories {
		mavenCentral()
		maven {
			name = "GradleRIO"
			url = "http://dev.imjac.in/maven"
		}
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.0'
		classpath group: 'jaci.openrio.gradle', name: 'GradleRIO', version: '+'
	}
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'com.google.protobuf'
apply plugin: 'eclipse'
apply plugin: 'GradleRIO'

group 'org.usfirst.frc.team449.turret2016'
version '1.0'

gradlerio.robotClass = "org.usfirst.frc.team449.robot.Robot"   //The class for the main Robot Class. Used in manifest
gradlerio.team = "449"

allprojects {
	tasks.withType(Javadoc).all { enabled = false }
}

repositories {
	mavenCentral()
	maven {
		name = "GradleRio"
		url = "http://dev.imjac.in/maven"
	}

	maven { url "https://plugins.gradle.org/m2/" }

	/*flatDir {
		dirs System.properties['user.home'] + '/wpilib/java/current/lib'
	}*/
}

dependencies {
	compile 'com.google.protobuf:protobuf-java:3.0.0'
	compile 'io.grpc:grpc-stub:1.0.0-pre2'
	compile 'io.grpc:grpc-protobuf:1.0.0-pre2'
	compile group: 'edu.wpi.first.wpilibj', name: 'wpilibJavaFinal', version: '0.1.0-SNAPSHOT'
	compile group: 'edu.wpi.first.wpilib.networktables.java', name: 'NetworkTables', version: '3.0.0-SNAPSHOT'
	compile project(':449-central-repo')
}

protobuf {
	generatedFilesBaseDir = "$projectDir/gen"
	protoc {
		// The artifact spec for the Protobuf Compiler
		artifact = 'com.google.protobuf:protoc:3.0.0'
	}
	plugins {
		// Optional: an artifact spec for a protoc plugin, with "grpc" as
		// the identifier, which can be referred to in the "plugins"
		// container of the "generateProtoTasks" closure.
		grpc {
			artifact = 'io.grpc:protoc-gen-grpc-java:1.0.0-pre2'
		}
	}
	generateProtoTasks {
		ofSourceSet('main')*.plugins {
			// Apply the "grpc" plugin whose spec is defined above, without
			// options.  Note the braces cannot be omitted, otherwise the
			// plugin will not be added. This is because of the implicit way
			// NamedDomainObjectContainer binds the methods.
			grpc { }
		}
	}
}

clean {
	delete protobuf.generatedFilesBaseDir
}

idea {
	module {
		sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/java")
	}
}

task convertFiles << {
	fileTree("./src/main/resources").matching { include "**/*.cfg" }.each { aFile ->
		exec {
			commandLine 'dos2unix'
			args aFile.absolutePath
		}
	}
}

gradlerio {
	deployers += [to: "/home/lvuser/map.cfg", from: './src/main/resources/map.cfg']
}

def robotManifest = {
	attributes 'Main-Class': 'edu.wpi.first.wpilibj.RobotBase'
	attributes 'Robot-Class': gradlerio.robotClass
}

jar {
	from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
	manifest robotManifest
}

task genJavadoc(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives genJavadoc
}